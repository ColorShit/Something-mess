Shader "Unlit/RimShader"
{
    Properties
    {
        _MainTex ("Main Texture", 2D) = "white" {}
		_RimColor ("Rim Color", Color) = (1, 1, 1, 1)
		_RimThreshold ("Rim Threshold", Range(0, 1)) = 0.45
		_RimSmooth ("Rim Smooth", Range(0, 0.5)) = 0.1
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 100

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            // make fog work
            #pragma multi_compile_fog

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
                float3 normal : NORMAL;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                UNITY_FOG_COORDS(1)
                float4 vertex : SV_POSITION;
                float3 worldNormal : TEXCOORD1;
				float3 worldPos : TEXCOORD2;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;
            float3 _RimColor;
			float _RimThreshold;
			float _RimSmooth;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                UNITY_TRANSFER_FOG(o,o.vertex);
                o.worldNormal = normalize(UnityObjectToWorldNormal(v.normal));
				o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                // sample the texture
                fixed4 col = tex2D(_MainTex, i.uv);
                // apply fog
                UNITY_APPLY_FOG(i.fogCoord, col);

                float3 viewDir = normalize(_WorldSpaceCameraPos.xyz - i.worldPos.xyz);
                float3 worldLightDir = UnityWorldSpaceLightDir(i.worldPos);
				float Nol = dot(i.worldNormal, worldLightDir);
				float Nov = dot(i.worldNormal, viewDir);
				float rim = (1 - max(0, Nov)) * Nol;
				float3 rimColor = smoothstep(
					_RimThreshold - _RimSmooth / 2,
					_RimThreshold + _RimSmooth / 2,
					rim) * _RimColor;

				float3 finalColor = saturate(col + rimColor);

                return float4(finalColor, 1);
            }
            ENDCG
        }
    }
}
