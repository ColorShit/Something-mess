using System;
using System.Runtime.InteropServices;

public class FileDialogWin32
{
    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    public class OpenFileName
    {
        public int structSize = Marshal.SizeOf(typeof(OpenFileName));
        public IntPtr hwndOwner = IntPtr.Zero;
        public IntPtr hInstance = IntPtr.Zero;
        public string filter = null;
        public string customFilter = null;
        public int maxCustFilter = 0;
        public int filterIndex = 0;

        public string file = null;
        public int maxFile = 0;
        public string fileTitle = null;
        public int maxFileTitle = 0;

        public string initialDir = null;
        public string title = null;
        public int flags = 0;
        public short fileOffset = 0;
        public short fileExtension = 0;
        public string defExt = null;
        public IntPtr custData = IntPtr.Zero;
        public IntPtr hook = IntPtr.Zero;
        public string templateName = null;
        public IntPtr reservedPtr = IntPtr.Zero;
        public int reservedInt = 0;
        public int flagsEx = 0;
    }

    [DllImport("Comdlg32.dll", CharSet = CharSet.Auto)]
    public static extern bool GetOpenFileName([In, Out] OpenFileName ofn);

    [DllImport("Comdlg32.dll", CharSet = CharSet.Auto)]
    public static extern bool GetSaveFileName([In, Out] OpenFileName ofn);
}



[Serializable]
public class UnitData
{
    public string unitName;
    public Vector3 position;
    public Quaternion rotation;
    public Vector3 scale;
    public UnitType unitType;
    public int[] pointIndex;
    public bool[] rORs;
    public string[] lineNames;
}

[Serializable]
public class LineData
{
    public string lineName;
    public Vector3[] pointPositions;
    public bool[] childLineVector;
}

[Serializable]
public class SceneData
{
    public UnitData[] unitDatas;
    public LineData[] lineDatas;
}

void Save()
{
    FileDialogWin32.OpenFileName openFileName = new FileDialogWin32.OpenFileName();
    openFileName.structSize = Marshal.SizeOf(openFileName);

    openFileName.filter = "File(*.ioaw)\0*.ioaw\0\0";
    openFileName.file = new string(new char[256]);
    openFileName.maxFile = openFileName.file.Length;
    openFileName.fileTitle = new string(new char[64]);
    openFileName.maxFileTitle = openFileName.fileTitle.Length;
    openFileName.initialDir = UnityEngine.Application.streamingAssetsPath.Replace('/', '\\');// Default Path
    openFileName.title = "Save File";
    openFileName.flags = 0x00080000 | 0x00001000 | 0x00000800 | 0x00000008;
    if (FileDialogWin32.GetSaveFileName(openFileName))
    {
        if (openFileName.file.Contains(".ioaw"))
        {
            SaveEntity(openFileName.file);
        }
        else
        {
            SaveEntity(openFileName.file + ".ioaw");
        }
    }
    else
    {
        Debug.LogWarning("User Cancel the Operation that build new file!");
    }
}

void SaveEntity(string FilePath)
{
    int i = 10;

    UnitData[] UnitDatas = new UnitData[i];
    LineData[] LineDatas = new LineData[i];

    for (int j = 0; j < i; j++)
    {
        UnitDatas[j] = new UnitData{};
        LineDatas[j] = new LineData{};
    }
    
    SceneData sceneData = new SceneData { unitDatas, lineDatas };
    
    string json = JsonUtility.Tojson(sceneData, true);
    File.WriteAllText(FilePath, json);
}

public void Load()
{
    FileDialogWin32.OpenFileName openFileName = new FileDialogWin32.OpenFileName();
    openFileName.filter = "File(*.ioaw)\0*.ioaw\0\0";
    openFileName.file = new string(new char[256]);
    openFileName.maxFile = openFileName.file.Length;
    openFileName.fileTitle = new string(new char[64]);
    openFileName.maxFileTitle = openFileName.fileTitle.Length;
    openFileName.initialDir = Application.streamingAssetsPath.Replace('/', '\\');// Default Path
    openFileName.title = "Select File";
    openFileName.flags = 0x00080000 | 0x00001000 | 0x00000800 | 0x00000008;
    if (FileDialogWin32.GetOpenFileName(openFileName))
    {
        Debug.Log("Selected File: " + openFileName.file);
        LoadEntity(openFileName.file);
    }
    else
    {
        Debug.LogWarning("User Cancel the Operation that build new file!");
    }
}
void LoadEntity(string FilePath)
{
    if (File.Exists(FilePath))
    {
        string json = File.ReadAllText(FilePath);
        SceneData sceneData = JsonUtility.FromJson<SceneData>(json);
    }
}
