Shader "Unlit/FresnelEffectShader"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _MainColor ("Main Color", Color) = (1, 1, 1, 1)
        _FresnelPower ("Fresnel Power", Range(0, 20)) = 1
        [HDR]_FresnelColor ("Fresnel color", Color) = (1, 1, 1, 1)
    }
    SubShader
    {
        Tags { "RenderPipeline" = "UniversalPipeline" "RenderType"="Opaque" }
        LOD 100

        HLSLINCLUDE
        #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
        
        CBUFFER_START(UnityPerMaterial)
        float4 _FresnelColor;
        float _FresnelPower;
        float4 _MainColor;
        CBUFFER_END

        TEXTURE2D(_MainTex);
        SAMPLER(sampler_MainTex);

        struct VertexInput
        {
            float4 vertex : POSITION;
            float2 uv : TEXCOORD0;
            float3 normal : NORMAL;
        };

        struct VertexOutput
        {
            float2 uv : TEXCOORD0;
            float4 vertex : SV_POSITION;
            float4 color : TEXCOORD1;
        };

        ENDHLSL

        Pass
        {
            Tags { "LightMode" = "UniversalForward" }

            HLSLPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/SpaceTransforms.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            float CalculateFresnelEffect(half3 worldNormal, half3 viewDir, int power)
            {
                return pow((1.0 - saturate(dot(normalize(worldNormal), normalize(viewDir)))), power);
            }

            VertexOutput vert(VertexInput i)
            {
                VertexOutput o;
                o.vertex = TransformObjectToHClip(i.vertex.xyz);
                o.uv = i.uv;
                float3 worldPos = mul(unity_ObjectToWorld, i.vertex).xyz;
                float3 viewDir = _WorldSpaceCameraPos.xyz - worldPos;
                float3 worldNormal = mul(unity_ObjectToWorld, i.normal);
                o.color = CalculateFresnelEffect(worldNormal, viewDir, _FresnelPower) * _FresnelColor;
                return o;
            }

            float4 frag(VertexOutput i) : SV_Target
            {
                float4 colorSample = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, i.uv) * _MainColor;
                return (colorSample + i.color);
            }
            ENDHLSL
        }
    }
}
