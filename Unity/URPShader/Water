Shader "Unlit/Water"
{
    Properties
    {
        _ShallowWater ("shallow Color", Color) = (1.0, 1.0, 1.0, 1.0)
        _DeepWater ("DeepColor", Color) = (1.0, 1.0, 1.0, 1.0)
        _WaterAlpha("WaterAlpha",Range(0,1)) = 0.5

        _SurfaceNoise("Surface Noise", 2D) = "white" {}
        _MoveSpeed("MoveSpeed",Range(0,1)) = 0.5

        _FoamDistance("Foam Distance",Range(0,10)) = 0.4
        _FoamColor("FoamColor", Color) = (1.0, 1.0, 1.0, 1.0)

    }
    SubShader
    {
        Tags 
        {
            "RenderPipeline" = "UniversalPipeline"
            "RenderType" = "Transparent"
            "Queue" = "Transparent"
        }
        Pass
        {
            Blend SrcAlpha OneMinusSrcAlpha

            HLSLPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareDepthTexture.hlsl"

            float4 _ShallowWater;
            float4 _DeepWater;
            float _WaterAlpha;

            sampler2D _SurfaceNoise;
            float4 _SurfaceNoise_ST;
            float _MoveSpeed;
            
            float _FoamDistance;
            float4 _FoamColor;

            struct a2v
            {
                float3 positionOS : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float4 positionCS : SV_POSITION;
                float4 screenPosition : TEXCOORD0;
                float2 noiseUV : TEXCOORD1;
                float2 distortUV : TEXCOORD2;
            };

            v2f vert (a2v v)
            {
                v2f o;
                VertexPositionInputs positionInputs = 
                    GetVertexPositionInputs(v.positionOS);
                o.positionCS = positionInputs.positionCS;
                o.noiseUV = TRANSFORM_TEX(v.uv, _SurfaceNoise);
                o.screenPosition = 
                    ComputeScreenPos(positionInputs.positionCS);
                return o;
            }

            half4 frag (v2f i) : SV_Target
            {
                float sceneRawDepth = SampleSceneDepth(
                    i.screenPosition.xy / i.screenPosition.w);
                float sceneEyeDepth = LinearEyeDepth(sceneRawDepth, _ZBufferParams);
                float waterDepth = sceneEyeDepth - i.screenPosition.w;
                float3 waterColor = lerp(_ShallowWater, _DeepWater, waterDepth);
                float SurfaceNoiseSample = tex2D(
                    _SurfaceNoise, i.noiseUV + 
                    _Time.y * _MoveSpeed * 0.1).r;
                float foam = saturate(waterDepth / _FoamDistance);
                float surfaceNoise = smoothstep(0, foam, SurfaceNoiseSample);
                float4 col = float4(waterColor + 
                    surfaceNoise * _FoamColor, _WaterAlpha);
                return col;
            }
            ENDHLSL
        }
    }
}
