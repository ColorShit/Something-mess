using UnityEngine;
using System.Collections.Generic;
using System.Reflection;
using System;
using System.Linq;

namespace FlashStorm
{
    [ExecuteAlways]
    public class MainController : MonoBehaviour
    {
        #region Single Mode
        public static MainController instance;
        private void Awake()
        {
            instance = this;
            stack = new FStack();
            dicView = new Dictionary<Type, FSView>();
            dicModel = new Dictionary<string, FSModel>();
            InstantiateModelAll();
            father_tree_node = ftn;
            specUILayer = ftn[0];
        }
        #endregion
        public static Transform[] father_tree_node;
        public Transform[] ftn;
        public string firstName;

        private Dictionary<Type, FSView> dicView;
        private Dictionary<string, FSModel> dicModel;

        #region Stack Operations
        private FStack stack;
        public void PushStack<T>() where T : FSView
        {
            FSView tempView = InstantiateView(typeof(T).Name);
            stack.Push(tempView);
        }
        public void PushStack(string name)
        {
            FSView tempView = InstantiateView(name);
            stack.Push(tempView);
        }
        public void ReplaceStack<T>() where T : FSView
        {
            FSView tempView = InstantiateView(typeof(T).Name);
            stack.Replace(tempView);
        }
        private FSView InstantiateView(string typename)
        {
            FSView tempView;
            Type tempType = Type.GetType(typename);
            dicView.TryGetValue(tempType, out tempView);
            if (tempView == null)
            {
                tempView = Activator.CreateInstance(tempType) as FSView;
                dicView.Add(tempType, tempView);
            }
            return tempView;
        }
        public FSModel ConnectModel(string typename)
        {
            FSModel model;
            dicModel.TryGetValue(typename, out model);
            return model;
        }
        private void InstantiateModelAll()
        {
            Type baseType = typeof(FSModel);
            var types = Assembly.GetExecutingAssembly().GetTypes().
                Where(t => t.IsClass && !t.IsAbstract).
                Where(t => baseType.IsAssignableFrom(t));
            foreach (var item in types)
            {
                InstantiateModel(item.Name);
            }
        }
        private void InstantiateModel(string name)
        {
            FSModel tempModel = Activator.CreateInstance(Type.GetType(name)) as FSModel;
            dicModel.Add(name, tempModel);
        }

        public void PopStack()
        {
            stack.Pop();
        }
        public void PopStack(int m)
        {
            int n = stack.Size() - m, i = 0;
            while (i < n)
            {
                stack.Pop();
                i++;
            }
        }
        #endregion

        private void Start()
        {
            PushStack(firstName);
        }

        public FreedomWatch mainCamera;
        public Transform specUILayer { get; set; }
    }
}
