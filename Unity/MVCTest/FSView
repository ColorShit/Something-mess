using UnityEngine;
using System;
using System.Reflection;

namespace FlashStorm
{
    public abstract class FSView<T, F> : FSView where T : FSPanel where F : FSModel
    {
        protected T Panel;
        protected F Model;
        private string panelPath;
        private byte level;
        public FSView()
        {
            var route = GetType().GetCustomAttribute<MVPAttribute>();
            panelPath = "PanelPrefabs/" + route.path;
            level = route.treeLevel;
            Model = MainController.instance.ConnectModel(typeof(F).Name) as F;
        }

        public override void Enable()
        {
            Panel = UnityEngine.Object.Instantiate(Resources.Load<T>(panelPath), MainController.father_tree_node[level]);
            ScaleOperate.AdaptiveScreen(Panel.BgImage, 1920, 1080);
            OnEnable();
        }
        public abstract void OnEnable();

        public override void Close()
        {
            GameObject.Destroy(Panel.gameObject);
            OnClose();
        }
        public abstract void OnClose();

        public override void Show()
        {
            ShowAction?.Invoke();
        }
        public override void Hidden()
        {
            HiddenAction?.Invoke();
        }
    }

    public abstract class FSView
    {
        public abstract void Enable();
        public abstract void Close();
        public abstract void Show();
        protected FSAction ShowAction;
        public abstract void Hidden();
        protected FSAction HiddenAction;
        public static void CheckInterfaceOnShow(Type childView, FSView originalView)
        {
            if (typeof(IViewOnShow).IsAssignableFrom(childView))
            {
                MethodInfo methodInfo = childView.GetMethod("OnShow");
                originalView.ShowAction += () => { methodInfo.Invoke(originalView, new object[] { }); };
            }
        }
        public static void CheckInterfaceOnHide(Type childView, FSView originalView)
        {
            if (typeof(IViewOnHidden).IsAssignableFrom(childView))
            {
                MethodInfo methodInfo = childView.GetMethod("OnHidden");
                originalView.HiddenAction += () => { methodInfo.Invoke(originalView, new object[] { }); };
            }
        }
    }

    [AttributeUsage(AttributeTargets.Class)]
    public class MVPAttribute : Attribute
    {
        public string path;
        public byte treeLevel;
        public MVPAttribute(string Path, byte level)
        {
            path = Path;
            treeLevel = level;
        }
    }
}

