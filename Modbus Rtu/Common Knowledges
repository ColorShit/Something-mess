---------------16-way register modbus rtu 485----------------------
Command sent :  
      1byte : register address(slave ID)
      1bytes : function Code (0x01 Read Coils,
                             0x02 Read Discrete Inputs,
                             0x03 Read Holding Registers, 
                             0x04 Read Input Registers,
                             0x05 Write Single Coil,
                             0x06 Write Single Holding Register,
                             0x0F Write Multiple Coils,
                             0x10 Write Multiple Holding Registers,
                             0x07 Read Exception Status,
                             0x08 Diagnostic,
                             0x11 Report Slave ID,
                             0x2B/0x0E Read Device Identification)
      2bytes : Starting Registers Address, normal Order
      2bytes : Amount of Register which will read, normal Order(1:01, 2: 02 ... 10: 0A, 11: 0B ... 16: 10)
      2bytes : CRC Check Code(
                   UInt16 crc;
                   Low byte first{(byte)(crc & 0xFF)}, 
                   High byte last{(byte)((crc >> 8) & 0xFF)})

Command Receive:
      1byte : register address(slave ID)
      1byte : function Code
      1byte : data length
              (if only read 8 triggers, data length will be 1(byte), because index 0 trigger is 1, 
               index 1 trigger is 2, index 2 trigger is 4.....index 7 trigger is 128, the sum of 
               index 0-7 is 255, equal a 8bits container, so we need 1 byte, the data length is 1 byte)
              (if read 16 triggers, data length will be 2(bytes), index 0 trigger is 1, index 1 trigger
               is 2......index 15 trigger is 32768, the sum of index 0-15 is 65535, so we need 16bits
               container, that is 2 bytes)
      2bytes / 1byte / 3bytes : data
      2bytes : CRC Check Code
-----------------------------------------------------------------------------------
-------------------------/////////////////////////--------------------------------
private static UInt16 ModRTU_CRC(byte[] buf, int len)
{
    // Sample : buf (01 02 00 00 00 10)
    UInt16 crc = 0xFFFF;

    for (int pos = 0; pos < len; pos++)
    {
        crc ^= (UInt16)buf[pos];          // XOR byte into least sig. byte of crc

        for (int i = 8; i != 0; i--)
        {    // Loop over each bit
            if ((crc & 0x0001) != 0)
            {      // If the LSB is set
                crc >>= 1;                    // Shift right and XOR 0xA001
                crc ^= 0xA001;
            }
            else                            // Else LSB is not set
                crc >>= 1;                    // Just shift right
        }
    }
    // Note, this number has low and high bytes swapped, so use it accordingly (or swap bytes)
    return crc;
}

private static byte[] HexStringToByteArray(string hex)
{
    // Sample : 01 02 00 00 00 10 79 C6
    int length = (hex.Length + 1) / 3;
    if (length % 2 != 0)
        Debug.LogError("Hex string is not conform to format!");
    byte[] bytes = new byte[length];
    for (int i = 0; i < length; i++)
    {
        bytes[i] = Convert.ToByte(hex.Substring(i * 3, 2), 16);
    }
    return bytes;
}

public static void PrintAllPortNames()
{
    string[] portNames = SerialPort.GetPortNames();

    if (portNames.Length == 0)
        Debug.Log("There is not serial port which is available.");
    else
    {
        foreach (string name in portNames)
        {
            Debug.Log("Available serial port: " + name);
        }
    }
}
------------------------------------------------------------------------------------
