using System;
using System.IO.Ports;
using System.Threading;
using TMPro;
using UnityEngine;

public class SerialPortInterface
{
    public TextMeshProUGUI showMsg;
    SerialPort m_port;
    string _portName;
    int _baudrate;
    int readBitNums;

    Thread readDataThread;

    public SerialPortInterface(string portName, int baudrate)
    {
        _portName = portName;
        _baudrate = baudrate;
        readBitNums = 7;
        readDataThread = new Thread(ReadDataEntity);
        try
        {
            m_port = new SerialPort(_portName, _baudrate);
            Thread.Sleep(1000);
            Debug.Log($"{m_port.PortName} initial has succeed!");
        }
        catch (Exception)
        {
            Debug.Log($"{m_port} initial has failed!");
            throw;
        }
    }

    public void Connect()
    {
        if (m_port != null)
        {
            try
            {
                if (m_port.IsOpen) m_port.Close();
                m_port.Open();
                Debug.Log($"{m_port.PortName} has Connected Succeed!");
            }
            catch (Exception)
            {
                Debug.Log($"{m_port} has Connected! failed!");
                throw;
            }
        }
        else
        {
            Debug.Log($"{m_port} is null!");
        }
    }
    public void Disconnect()
    {
        if (m_port != null && m_port.IsOpen)
        {
            m_port.Close();
            m_port.Dispose();
            Debug.Log($"{m_port.PortName} has closed!");
        }
    }

    bool _continue;
    byte[] data = new byte[7];
    int number;
    private void ReadDataEntity()
    {
        while (_continue)
        {
            if (m_port != null && m_port.IsOpen)
            {
                try
                {
                    byte[] buffer = new byte[readBitNums];
                    int bytes = 0;
                    bytes = m_port.Read(buffer, 0, buffer.Length);

                    for (int i = 0; i < bytes; i++)
                    {
                        data[i + number] = buffer[i];
                    }
                    number += bytes;

                    if (number == readBitNums)
                    {
                        string str = "";
                        for (int i = 0; i < readBitNums; i++)
                        {
                            str += data[i].ToString() + " ";
                        }
                        Debug.Log("Receive Data: " + str);
                        number = 0;
                    }
                }
                catch (Exception)
                {
                }
            }
            //Thread.Sleep(500);
        }
    }
    public void StartReadData()
    {
        if (_continue) return;
        _continue = true;
        readDataThread.Start();
    }
    public void StopReadData()
    {
        if (!_continue) return;
        _continue = false;
        readDataThread.Join(5000);
    }

    public void SendMessage(string str)
    {
        if (m_port != null && m_port.IsOpen)
        {
            try
            {
                byte[] buffer = HexStringToByteArray(str);
                if (buffer[5] > 8)
                    readBitNums = 7;
                else
                    readBitNums = 6;

                // Verify CRC protocol
                UInt16 crc = ModRTU_CRC(buffer, buffer.Length);
                byte[] fullBuffer = new byte[buffer.Length + 2];
                Array.Copy(buffer, fullBuffer, buffer.Length);
                // CRC check : Low byte first, High byte last.
                fullBuffer[buffer.Length] = (byte)(crc & 0xFF);
                fullBuffer[buffer.Length + 1] = (byte)((crc >> 8) & 0xFF);

                m_port.Write(fullBuffer, 0, fullBuffer.Length);
            }
            catch (Exception)
            {
                Debug.Log("Send Message is failed!");
                throw;
            }
        }
    }

    public static void PrintAllPortNames()
    {
        string[] portNames = SerialPort.GetPortNames();

        if (portNames.Length == 0)
            Debug.Log("There is not serial port which is available.");
        else
        {
            foreach (string name in portNames)
            {
                Debug.Log("Available serial port: " + name);
            }
        }
    }

    private static byte[] HexStringToByteArray(string hex)
    {
        int length = (hex.Length + 1) / 3;
        if (length % 2 != 0)
            Debug.LogError("Hex string is not conform to format!");
        byte[] bytes = new byte[length];
        for (int i = 0; i < length; i++)
        {
            bytes[i] = Convert.ToByte(hex.Substring(i * 3, 2), 16);
        }
        return bytes;
    }

    private static UInt16 ModRTU_CRC(byte[] buf, int len)
    {
        UInt16 crc = 0xFFFF;

        for (int pos = 0; pos < len; pos++)
        {
            crc ^= (UInt16)buf[pos];          // XOR byte into least sig. byte of crc

            for (int i = 8; i != 0; i--)
            {    // Loop over each bit
                if ((crc & 0x0001) != 0)
                {      // If the LSB is set
                    crc >>= 1;                    // Shift right and XOR 0xA001
                    crc ^= 0xA001;
                }
                else                            // Else LSB is not set
                    crc >>= 1;                    // Just shift right
            }
        }
        // Note, this number has low and high bytes swapped, so use it accordingly (or swap bytes)
        return crc;
    }
}
