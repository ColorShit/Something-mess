class Program
{
    public static void Main()
    {
        RingQueue ringQueue = new RingQueue(capacity: 3);
        ICommand[] commands = new ICommand[] { new A(), new B(), new C(), new D() };
        int index = 0;

        while (true)
        {
            if (Console.KeyAvailable)
            {
                var keyinfo = Console.ReadKey(intercept: true);

                if (keyinfo.Key == ConsoleKey.Enter)
                {
                    ringQueue.Enqueue(commands[index]);

                    if (index == 3) index = 0;
                    else index++;

                    Console.WriteLine("Head: " + ringQueue.Head);
                    Console.WriteLine("Tail: " + ringQueue.Tail);
                    ringQueue.Execute();
                }
                else if (keyinfo.Key == ConsoleKey.Spacebar)
                {
                    ringQueue.Dequeue();

                    Console.WriteLine("Head: " + ringQueue.Head);
                    Console.WriteLine("Tail: " + ringQueue.Tail);
                    ringQueue.Execute();
                }

                Console.WriteLine();
            }
        }
    }

    public class A : ICommand
    {
        public void Execute()
        {
            
        }

        public void Undo()
        {
            Console.WriteLine("A");
        }
    }

    public class B : ICommand
    {
        public void Execute()
        {

        }

        public void Undo()
        {
            Console.WriteLine("B");
        }
    }

    public class C : ICommand
    {
        public void Execute()
        {

        }

        public void Undo()
        {
            Console.WriteLine("C");
        }
    }

    public class D : ICommand
    {
        public void Execute()
        {

        }

        public void Undo()
        {
            Console.WriteLine("D");
        }
    }

    public class RingQueue
    {
        ICommand[] commands;
        int head;
        int tail;
        int count;

        public int Tail => tail;
        public int Head => head;
        public bool IsEmpty => count == 0;
        public bool IsFull => count == Capacity;
        public int Capacity { get; set; }

        public void Execute()
        {
            if (commands[head] is not null) commands[head].Undo();
            else Console.WriteLine("Head Null");
            if (commands[tail] is not null) commands[tail].Undo();
            else Console.WriteLine("Tail Null");
        }

        public RingQueue(int capacity)
        {
            commands = new ICommand[capacity];
            head = 0;
            tail = 0;
            count = 0;
            Capacity = capacity;
        }

        public void Enqueue(ICommand command)
        {
            if (count == 0)
            {
                commands[tail] = command;
                count++;
            }
            else if (count == Capacity)
            {
                commands[head] = command;
                if (tail == Capacity - 1)
                {
                    tail = 0;
                    head = 1;
                }
                else if (tail == Capacity - 2)
                {
                    tail = Capacity - 1;
                    head = 0;
                }
                else
                {
                    tail++;
                    head++;
                }
            }
            else
            {
                if (tail == Capacity - 1)
                    tail = 0;
                else tail++;
                commands[tail] = command;
                count++;
            }
            command.Execute();
        }

        public ICommand Dequeue()
        {
            if (count == 0) return null;
            else if (count == 1)
            {
                ICommand tempCommand = commands[head];
                tempCommand.Undo();
                commands[head] = null;
                count--;
                return tempCommand;
            }
            else
            {
                ICommand tempCommand = commands[head];
                tempCommand.Undo();
                commands[head] = null;
                count--;
                head = head == Capacity - 1 ? 0 : head + 1;
                return tempCommand;

            }
        }
    }

    public interface ICommand
    {
        void Execute();
        void Undo();
    }
}
