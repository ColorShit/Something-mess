namespace FlashStorm
{
    class FSNode<T>
    {
        public T value;
        public FSNode<T> next;
        public FSNode(T Value) 
        {  
            value = Value;
            next = null;
        }
    }

    class FSList<T>
    {
        FSNode<T> head;
        int length = 0;

        public FSList()
        {
            head = null; 
        }

        public FSList(T Value) 
        {
            head = new FSNode<T>(Value);
            length++;
        }

        public void Add(T Value)
        {
            if (head == null)
                head = new FSNode<T>(Value);
            else
            {
                FSNode<T> tempNode = head;
                while (tempNode.next != null)
                {
                    tempNode = tempNode.next;
                }
                tempNode.next = new FSNode<T>(Value);
            }
            length++;
        }

        public void Remove(T Value) 
        {
            if (length == 0)
                throw new InvalidOperationException("List is empty");

            if (EqualityComparer<T>.Default.Equals(head.value, Value))
            {
                head = head.next;
                length--;
                return;
            }

            FSNode<T> tempNode = head.next;
            while (tempNode != null)
            {
                if (EqualityComparer<T>.Default.Equals(tempNode.value, Value))
                {
                    tempNode.next = tempNode.next.next;
                    length--;
                    return;
                }
                tempNode = tempNode.next;
            }
        }

        public int Count()
        {
            return length;
        }

        public void Debug()
        {
            if (head == null)
            {
                Console.WriteLine("This List is NULL");
                return;
            }
            FSNode<T> tempNode = head;
            while (tempNode != null)
            {
                Console.WriteLine(tempNode.value);
                tempNode = tempNode.next;
            }
        }
    }
}
