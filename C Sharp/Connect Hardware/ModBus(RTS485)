//---------------Main Invoke function----------------//
using (MyModbus modbus = new MyModbus("COM3", 9600))
{
    modbus.Connect();
    modbus.StartReadData();

    int number = 0;
    while (number < 200)
    {
        Console.ReadLine();
        modbus.SendMessage("02 02 00 00 00 10");
        Console.WriteLine($"Number: {number}");
        Thread.Sleep(100);
        number++;
    }
}

//---------------Port Class---------------//
using System.IO.Ports;

namespace ModbusProject.MyModbus
{
    class MyModbus : IDisposable
    {
        SerialPort m_port;
        string _portName;
        int _baudrate;
        int readBitAmount;

        Thread readDataThread;

        public MyModbus(string portName, int baudrate)
        {
            _portName = portName;
            _baudrate = baudrate;
            readBitAmount = 7;
            number = 0;
            readDataThread = new Thread(ReadDataEntity);
            try
            {
                m_port = new SerialPort(portName, baudrate);
                Thread.Sleep(1000);
                Console.WriteLine($"{m_port.PortName} initial has succeed!");
            }
            catch (Exception)
            {
                Console.WriteLine($"{m_port} initial has failed!");
                throw;
            }
            _continue = false;
        }

        public void Connect()
        {
            if (m_port != null)
            {
                try
                {
                    if (m_port.IsOpen) m_port.Close();
                    m_port.Open();
                    Console.WriteLine($"{m_port.PortName} has Connected Succeed!");
                }
                catch (Exception)
                {
                    Console.WriteLine($"{m_port} has Connected! failed!");
                    throw;
                }
            }
            else
            {
                Console.WriteLine($"{m_port} is null!");
            }
        }
        public void Disconnect()
        {
            if (m_port != null && m_port.IsOpen)
            {
                m_port.Close();
                m_port.Dispose();
                Console.WriteLine($"{m_port.PortName} has closed!");
            }
        }
        bool _continue;
        byte[] data = new byte[7];
        int number;
        private void ReadDataEntity()
        {
            while (_continue) 
            {
                if (m_port != null && m_port.IsOpen)
                {
                    try
                    {
                        byte[] buffer = new byte[readBitAmount];
                        int bytes = 0;
                        bytes = m_port.Read(buffer, 0, buffer.Length);

                        for (int i = 0; i < bytes; i++)
                        {
                            data[i + number] = buffer[i];
                        }
                        number += bytes;

                        Console.WriteLine("number: " + number);
                        Console.WriteLine("readBitAmount: " + readBitAmount);
                        if (number == readBitAmount)
                        {
                            /// Get the whole message
                            string str = "";
                            for (int i = 0; i < 7; i++)
                            {
                                str += data[i].ToString() + " ";
                            }
                            int[] tempArray = null;
                            if (readBitAmount == 7)

                                tempArray = AnalysisOpeningTriggers(data[readBitAmount - 4], data[readBitAmount - 3]);
                            else if (readBitAmount == 6)
                                tempArray = AnalysisOpeningTriggers(data[readBitAmount - 3]);
                            if (tempArray == null)
                            {
                                Console.WriteLine("Opening Trigger's amount is 0!");
                            }
                            else
                            {
                                string tempStr = "";
                                for (int j = 0; j < tempArray.Length; j++)
                                {
                                    tempStr += tempArray[j].ToString() + " ";
                                }
                                Console.WriteLine("Triggers index: " + tempStr);
                            }
                            Console.WriteLine("Receive Data: " + str);
                            ///
                            number = 0;
                        }
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
                //Thread.Sleep(500);
            }
        }

        public void StartReadData()
        {
            if (_continue) return;
            _continue = true;
            readDataThread.Start();
        }
        public void StopReadData() 
        {
            if (!_continue) return;
            _continue = false;
            readDataThread.Join(5000);
            Console.WriteLine($"{m_port.PortName} Read Data has over");
        }

        public void SendMessage(string str)
        {
            if (m_port != null && m_port.IsOpen)
            {
                try
                {
                    byte[] buffer = HexStringToByteArray(str);
                    if (buffer[5] > 8)
                        readBitAmount = 7;
                    else
                        readBitAmount = 6;
                    UInt16 crc = ModRTU_CRC(buffer, buffer.Length);
                    byte[] fullbuffer = new byte[buffer.Length + 2];
                    Array.Copy(buffer, fullbuffer, buffer.Length);
                    fullbuffer[buffer.Length] = (byte)(crc & 0xFF);
                    fullbuffer[buffer.Length + 1] = (byte)((crc >> 8) & 0xFF);
                    m_port.Write(fullbuffer, 0, fullbuffer.Length);
                }
                catch (Exception)
                {
                    Console.WriteLine("Send Message is failed!");
                    throw;
                }
            }
        }

        public void Dispose()
        {
            StopReadData();
            Disconnect();
        }

        // Amount of Register which will read is more than 8.
        private static int[] AnalysisOpeningTriggers(byte low, byte high)
        {
            if (low == 0 && high == 0)
                return null;
            List<int> triggers = new List<int>();

            int amount = (high << 8) | low;
            int i = 1, power = 0;
            while (power < 16)
            {
                int tempA = i;
                i *= 2;
                if (amount % i >= tempA)
                    triggers.Add(power);
                power++;
            }
            Console.WriteLine("Triggers's Count: " + triggers.Count);

            int[] result = new int[triggers.Count];
            int temp = 0;
            foreach (int trigger in triggers) 
            {
                result[temp] = trigger;
                temp++;
            }
            return result;
        }
        // Amount of Register which will read is less or equal than 8.
        private static int[] AnalysisOpeningTriggers(byte data)
        {
            if (data == 0) return null;
            List<int> triggers = new List<int>();

            int i = 1, power = 0;
            while (power < 8)
            {
                int tempA = i;
                i *= 2;
                if (data % i >= tempA)
                    triggers.Add(power);
                power++;
            }

            int[] result = new int[triggers.Count];
            int temp = 0;
            foreach (int trigger in triggers)
            {
                result[temp] = trigger;
                temp++;
            }
            return result;
        }

        private static byte[] HexStringToByteArray(string hex)
        {
            int length = (hex.Length + 1) / 3;
            if (length % 2 != 0)
                throw new Exception("Hex string is not conform to format!");
            byte[] bytes = new byte[length];
            for (int i = 0; i < length; i++)
            {
                bytes[i] = Convert.ToByte(hex.Substring(i * 3, 2), 16);
            }
            return bytes;
        }

        private static UInt16 ModRTU_CRC(byte[] buf, int len)
        {
            UInt16 crc = 0xFFFF;

            for (int pos = 0; pos < len; pos++)
            {
                crc ^= (UInt16)buf[pos];          // XOR byte into least sig. byte of crc

                for (int i = 8; i != 0; i--)
                {    // Loop over each bit
                    if ((crc & 0x0001) != 0)
                    {      // If the LSB is set
                        crc >>= 1;                    // Shift right and XOR 0xA001
                        crc ^= 0xA001;
                    }
                    else                            // Else LSB is not set
                        crc >>= 1;                    // Just shift right
                }
            }
            // Note, this number has low and high bytes swapped, so use it accordingly (or swap bytes)
            return crc;
        }
    }
}
