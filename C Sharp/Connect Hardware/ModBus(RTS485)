using System.IO.Ports;

namespace ModbusProject.MyModbus
{
    class MyModbus : IDisposable
    {
        SerialPort m_port;
        string _portName;
        int _baudrate;

        Thread readDataThread;

        public MyModbus(string portName, int baudrate)
        {
            _portName = portName;
            _baudrate = baudrate;
            readDataThread = new Thread(ReadDataEntity);
            try
            {
                m_port = new SerialPort(portName, baudrate);
                Thread.Sleep(1000);
                Console.WriteLine($"{m_port.PortName} initial has succeed!");
            }
            catch (Exception)
            {
                Console.WriteLine($"{m_port} initial has failed!");
                throw;
            }
            
        }

        public void Connect()
        {
            if (m_port != null)
            {
                try
                {
                    if (m_port.IsOpen) m_port.Close();
                    m_port.Open();
                    Console.WriteLine($"{m_port.PortName} has Connected Succeed!");
                }
                catch (Exception)
                {
                    Console.WriteLine($"{m_port} has Connected! failed!");
                    throw;
                }
            }
            else
            {
                Console.WriteLine($"{m_port} is null!");
            }
        }
        public void Disconnect()
        {
            if (m_port != null && m_port.IsOpen)
            {
                m_port.Close();
                m_port.Dispose();
                Console.WriteLine($"{m_port.PortName} has closed!");
            }
        }
        bool _continue;
        byte[] data = new byte[7];
        int number;
        private void ReadDataEntity()
        {
            while (_continue) 
            {
                if (m_port != null && m_port.IsOpen)
                {
                    try
                    {
                        byte[] buffer = new byte[7];
                        int bytes = 0;
                        bytes = m_port.Read(buffer, 0, buffer.Length);

                        for (int i = 0; i < bytes; i++)
                        {
                            data[i + number] = buffer[i];
                        }
                        number += bytes;

                        if (number == 7)
                        {
                            /// Get the whole message
                            string str = "";
                            for (int i = 0; i < 7; i++)
                            {
                                str += data[i].ToString() + " ";
                            }
                            Console.WriteLine("Receive Data: " + str);
                            ///
                            number = 0;
                        }
                    }
                    catch (Exception)
                    {
                    }
                }
                //Thread.Sleep(500);
            }
        }

        public void StartReadData()
        {
            if (_continue) return;
            _continue = true;
            readDataThread.Start();
        }
        public void StopReadData() 
        {
            if (!_continue) return;
            _continue = false;
            readDataThread.Join(5000);
        }

        public void SendMessage(string str)
        {
            if (m_port != null && m_port.IsOpen)
            {
                try
                {
                    byte[] buffer = HexStringToByteArray(str);
                    m_port.Write(buffer, 0, buffer.Length);
                }
                catch (Exception)
                {
                    Console.WriteLine("Send Message is failed!");
                    throw;
                }
            }
        }

        public void Dispose()
        {
            StopReadData();
            Disconnect();
        }

        private static byte[] HexStringToByteArray(string hex)
        {
            int length = (hex.Length + 1) / 3;
            if (length % 2 != 0)
                throw new Exception("Hex string is not conform to format!");
            byte[] bytes = new byte[length];
            for (int i = 0; i < length; i++)
            {
                bytes[i] = Convert.ToByte(hex.Substring(i * 3, 2), 16);
            }
            return bytes;
        }
    }
}
