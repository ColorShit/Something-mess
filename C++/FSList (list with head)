#pragma once
#include <iostream>
template<typename T>
class FSList
{
private:
	struct Node 
	{
		T data;
		Node* next;

		Node(const T& value) : data(value), next(nullptr) {}
	};

	Node* head;
public:
	FSList() :head(nullptr) {}
	FSList(T value) { Node* temp = new Node(value); head = temp; }

	T& Top()
	{
		Node* temp = head;
		while (temp->next)
		{
			temp = temp->next;
		}
		T&  tempRet = temp->data;
		return tempRet;
	}

	void Add(const T& value)
	{
		Node* temp = new Node(value);
		if (!head)
			head = temp;
		else
		{
			Node* current = head;
			while (current->next)
			{
				current = current->next;
			}
			current->next = temp;
		}
	}

	void Remove(T Value)
	{
		if (head == nullptr)
			return;
		Node* current = head;
		if (current->data == Value)
		{
			current = head->next;
			delete(head);
			if (current)
				head = current;
			else
				head = nullptr;
			return;
		}
		while (current->next)
		{
			Node* tempData = current->next;
			if (tempData->data == Value)
			{
				current->next = tempData->next;
				delete(tempData);
				return;
			}
			current = current->next;
		}
	}

	void RemoveTop() {
		if (head == nullptr)
			return;
		if (head->next == nullptr)
		{
			delete head;
			head = nullptr;
		}
		else
		{
			Node* current = head;
			while (current)
			{
				Node* temp = current->next;
				if (temp->next == nullptr)
				{
					delete temp;
					current->next = nullptr;
					return;
				}
				current = current->next;
			}
		}
	}

	void RemoveAll()
	{
		while (head)
		{
			Node* temp = head;
			head = head->next;
			delete temp;
		}
		head = nullptr;
	}

	int Length() 
	{
		int temp = 0;
		Node* tempValue = head;
		while (tempValue)
		{
			temp++;
			tempValue = tempValue->next;
		}
		return temp;
	}

	bool Empty()
	{
		return (head == nullptr) ? true : false;
	}

	void Print()
	{
		if (!head)
			return;
		Node* temp = head;
		while (temp)
		{
			std::cout << temp->data << std::endl;
			temp = temp->next;
		}
	}

	~FSList()
	{
		while (head)
		{
			Node* temp = head;
			head = head->next;
			delete temp;
		}
	}
};
