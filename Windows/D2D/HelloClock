#include <windows.h>
#include <winuser.h>
#include <d2d1.h>
#include <d2d1helper.h>

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

const wchar_t* className = L"helloClock";
const wchar_t* windowName = L"Good Night Made Baka!";

int width = 640;
int height = 480;
int xPoint = 960 - width / 2;
int yPoint = 540 - height / 2;

HWND hwnd;
ID2D1Factory* pFactory = NULL;
ID2D1HwndRenderTarget* pRenderTarget = NULL;
ID2D1SolidColorBrush* pBrush = NULL;
D2D1_ELLIPSE ellipse;
D2D1_POINT_2F point0;
D2D1_POINT_2F secondPoint;
D2D1_POINT_2F minutePoint;
D2D1_POINT_2F hourPoint;
HRESULT hr;

HRESULT Initialize();
void OnPaint();
void ReSize();
void CalculateLayout();

template <class T>
void DiscardGraphicsResources(T** point)
{
	if (*point)
	{
		(*point)->Release();
		*point = NULL;
	}
}

int WINAPI wWinMain(
	HINSTANCE hInstance,
	HINSTANCE, PWSTR pCmdLine, int nCmdShow)
{
	WNDCLASS wc = { 0 };
	wc.lpfnWndProc = WindowProc;
	wc.hInstance = hInstance;
	wc.lpszClassName = className;

	RegisterClass(&wc);

	hwnd = CreateWindowEx(
		0, className, windowName, WS_OVERLAPPEDWINDOW,
		xPoint, yPoint, width, height,
		NULL, NULL, hInstance, NULL);

	if (hwnd == FALSE)
	{
		return 0;
	}

	ShowWindow(hwnd, nCmdShow);

	MSG msg = {};
	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessageW(&msg);
	}
	return 0;
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	switch (uMsg)
	{
	case WM_PAINT:
		OnPaint();
		return 0;
	case WM_SIZE:
		ReSize();
		return 0;
	case WM_CREATE:
		if (FAILED(Initialize()))
		{
			return -1;
		}
		return 0;
	case WM_DESTROY:
		DiscardGraphicsResources(&pFactory);
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hwnd, uMsg, wParam, lParam);
	}
	return TRUE;
}

HRESULT Initialize()
{
	hr = D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, &pFactory);
	return hr;
}

HRESULT BeginPaint()
{
	hr = S_OK;
	if (pRenderTarget == NULL)
	{
		RECT rc;
		GetClientRect(hwnd, &rc);

		D2D1_SIZE_U size = D2D1::SizeU(rc.right, rc.bottom);
		hr = pFactory->CreateHwndRenderTarget(
			D2D1::RenderTargetProperties(),
			D2D1::HwndRenderTargetProperties(hwnd, size),
			&pRenderTarget);

		if (SUCCEEDED(hr))
		{
			const D2D1_COLOR_F color = D2D1::ColorF(1.0f, 1.0f, 1.0f);
			hr = pRenderTarget->CreateSolidColorBrush(color, &pBrush);

			if (SUCCEEDED(hr))
			{
				CalculateLayout();
			}
		}
	}
	return hr;
}

void OnPaint()
{
	hr = BeginPaint();
	if (SUCCEEDED(hr))
	{
		PAINTSTRUCT ps;
		BeginPaint(hwnd, &ps);

		pRenderTarget->BeginDraw();

		pRenderTarget->Clear(D2D1::ColorF(D2D1::ColorF::SkyBlue));

		SYSTEMTIME time;
		GetLocalTime(&time);
		const float fSecondAngle = 360 * (time.wSecond / 60.0f);
		const float fMinuteAngle = 360 * (time.wMinute / 60.0f);
		const float fHourAngle = 360 * (time.wHour / 12.0f);
		
		pRenderTarget->DrawEllipse(ellipse, pBrush, 10.0f);
		pRenderTarget->SetTransform(D2D1::Matrix3x2F::Rotation(fSecondAngle, ellipse.point));
		pRenderTarget->DrawLine(point0, secondPoint, pBrush, 2.0f);
		pRenderTarget->SetTransform(D2D1::Matrix3x2F::Rotation(fMinuteAngle, ellipse.point));
		pRenderTarget->DrawLine(point0, minutePoint, pBrush, 5.0f);
		pRenderTarget->SetTransform(D2D1::Matrix3x2F::Rotation(fHourAngle, ellipse.point));
		pRenderTarget->DrawLine(point0, hourPoint, pBrush, 8.0f);

		pRenderTarget->SetTransform(D2D1::Matrix3x2F::Identity());
		InvalidateRect(hwnd, NULL, FALSE);
		hr = pRenderTarget->EndDraw();
		if (FAILED(hr) || hr == D2DERR_RECREATE_TARGET)
		{
			DiscardGraphicsResources(&pRenderTarget);
			DiscardGraphicsResources(&pBrush);
		}
		EndPaint(hwnd, &ps);
	}
}

void ReSize()
{
	if (pRenderTarget != NULL)
	{
		RECT rc;
		GetClientRect(hwnd, &rc);

		D2D1_SIZE_U size = D2D1::SizeU(rc.right, rc.bottom);
		pRenderTarget->Resize(size);
		CalculateLayout();
		InvalidateRect(hwnd, NULL, FALSE);
	}
}

void CalculateLayout()
{
	if (pRenderTarget != NULL)
	{
		D2D1_SIZE_F size = pRenderTarget->GetSize();
		const float x = size.width / 2;
		const float y = size.height / 2;
		const float radius = min(x, y) - 50.0f;
		ellipse = D2D1::Ellipse(D2D1::Point2F(x, y), radius, radius);
		point0 = D2D1::Point2F(x, y);
		secondPoint = D2D1::Point2F(x, y - radius);
		minutePoint = D2D1::Point2F(x, y - radius + 50);
		hourPoint = D2D1::Point2F(x, y - radius + 100);
	}
}
