ComPtr<ID3D12CommandAllocator> m_commandAllocators[FrameCount];
UINT64 m_fenceValues[FrameCount];

//LoadPipeline
for (UINT n = 0; n < FrameCount; n++)
{
    ThrowIfFailed(m_swapChain->GetBuffer(n, IID_PPV_ARGS(&m_renderTargets[n])));
    m_device->CreateRenderTargetView(m_renderTargets[n].Get(), nullptr, rtvHandle);
    rtvHandle.Offset(1, m_rtvDescriptorSize);

    ThrowIfFailed(m_device->CreateCommandAllocator(
        D3D12_COMMAND_LIST_TYPE_DIRECT, IID_PPV_ARGS(&m_commandAllocator[n])));
}

//Load Assets
//Create the command list.
ThrowIfFailed(m_device->CreateCommandList(
    0, 
    D3D12_COMMAND_LIST_TYPE_DIRECT, 
    m_commandAllocator[m_frameIndex].Get(),
    m_pipelineState.Get(), 
    IID_PPV_ARGS(&m_commandList)));

//Create synchronization objects and wait until assets have been uploaded to the GPU.
m_fenceValues[m_frameIndex]++;

//Not the end
    
